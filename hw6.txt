Start the "echoserveri" server in a pane (e.g., pane 4) using the following command line:
./echoserveri 5599

(The port is arbitrary - it can be anything above 1023).

In three other panes (e.g., 1 - 3), run the following:
$ nc localhost 5599

(the port should be consistent with what you used to start the server)

After all three are running, type some text in the first of the three panes running "nc", and press enter.  Repeat with the second and third panes.

In a fifth pane (e.g., pane 5), run the following:
$ ps -Lo user,pid,ppid,nlwp,lwp,vsz,rss,state,ucmd -C echoserveri | grep ^username\\\|USER

The "ps" command lists information about processes that current exist on the system.  The -L option tells us to show threads as if they were processes.  We have selected to show only several fields:
user: the username of the user running the process (should be your CS username)
pid: the process ID of the process
ppid: the process ID of the parent process
nlwp: the number of threads (light-weight processes) being run
lwp: the thread ID of the thread
vsz: the number of bytes of virtual memory potentially used by the process
rss: the number of bytes of resident memory currently being used by the process
state: the state of the process, e.g., Running, Sleep, Zombie
ucmd: the command executed.

Part 1: no concurrency

1. Show the output from the ps command.

$ ps -Lo user,pid,ppid,nlwp,lwp,vsz,rss,state,ucmd -C echoserveri | grep ^meb1994\\\|USER
USER       PID  PPID NLWP   LWP    VSZ   RSS S CMD
meb1994  16766 16651    1 16766  10916  2088 S echoserveri

2. From the ps output, how many processes and how many threads are running, and why?  Use the PID and LWP to identify different threads or processes.

There is one process running and one thread running.
There is one process because one one connection is being established at a time.
There is one thread running because only one of the 3 executions of 'nc localhost -PORT' actually made a connection.

3. From the ps output, how much virtual and resident memory are they collectively (i.e., total) using on the system?  Note that memory for a given process should only be counted once, not once for each of its threads.

10,916 bytes of virtual memory and 2,088 bytes of resident memory

4. Enter "Ctrl-c" on the window in which "nc" was first executed to interrupt it.  What happens to the "nc" processes in the other windows?

When you stop the "nc" that connected with the echoserveri, the server establishes a connection with one of the other 2 "nc" commands that are pending.

Part 2: Process-based Concurrency

Repeat the exercises from Part 1 (except question 4), replacing all instances of "echoserveri" with "echoserverp".  Answer questions 1 - 3 for "echoserverp" as questions 5 - 7.

5.
$ ps -Lo user,pid,ppid,nlwp,lwp,vsz,rss,state,ucmd -C echoserverp | grep ^blackli\\\|USER
USER       PID  PPID NLWP   LWP    VSZ   RSS S CMD
blackli+  4415  2944    1  4415  10412  1264 S echoserverp
blackli+  4417  4415    1  4417  10412   124 S echoserverp
blackli+  4428  4415    1  4428  10412   124 S echoserverp
blackli+  4430  4415    1  4430  10412   124 S echoserverp

6.

There are 4 threads running. There is the server and the 3 clients.
There are 4 processes running. There is the server and 3 child processes (clients)
This is because all the clients established connections with the server

7.

Between all the processes/threads there is 4(10412) = 41,648 bytes of virtual memory being used and 1264+3(124) = 1,636 bytes of resident memory being used

Part 3: Simple Thread-based Concurrency

Repeat the exercises from Part 1 (except question 4), replacing all instances of "echoserveri" with "echoservert".  Answer questions 1 - 3 for "echoservert" as questions 8 - 10.

8.
$ ps -Lo user,pid,ppid,nlwp,lwp,vsz,rss,state,ucmd -C echoservert | grep ^blackli\\\|USER
USER       PID  PPID NLWP   LWP    VSZ   RSS S CMD
blackli+  5026  2944    4  5026 231608  1312 S echoservert
blackli+  5026  2944    4  5034 231608  1312 S echoservert
blackli+  5026  2944    4  5042 231608  1312 S echoservert
blackli+  5026  2944    4  5049 231608  1312 S echoservert

9.

There is one process (only one process ID is shown) and 4 threads.
This is because multiple threads can run within the context of a single process.

10.

There is a total of 231,608 bytes of virtual memory being used and 1,312 bytes of residual memory

Part 4: Threadpool-based Concurrency

11. $ ps -Lo user,pid,ppid,nlwp,lwp,vsz,rss,state,ucmd -C echoservert_pre | grep ^blackli\\\|USER
USER       PID  PPID NLWP   LWP    VSZ   RSS S CMD
blackli+ 12404 11810   11 12404 157912  1240 S echoservert_pre
blackli+ 12404 11810   11 12405 157912  1240 S echoservert_pre
blackli+ 12404 11810   11 12406 157912  1240 S echoservert_pre
blackli+ 12404 11810   11 12407 157912  1240 S echoservert_pre
blackli+ 12404 11810   11 12408 157912  1240 S echoservert_pre
blackli+ 12404 11810   11 12409 157912  1240 S echoservert_pre
blackli+ 12404 11810   11 12410 157912  1240 S echoservert_pre
blackli+ 12404 11810   11 12411 157912  1240 S echoservert_pre
blackli+ 12404 11810   11 12412 157912  1240 S echoservert_pre
blackli+ 12404 11810   11 12413 157912  1240 S echoservert_pre
blackli+ 12404 11810   11 12414 157912  1240 S echoservert_pre

12.

There is one process running and it is running 11 threads.

13.

There is 157,912 bytes of virtual memory and 1,240 bytes of resident memory

Repeat the exercises from Part 1 (except question 4), replacing all instances of "echoserveri" with "echoservert_pre".  Answer questions 1 - 3 for "echoservert_pre" as questions 11 - 13.

Name at least one pro and one con to each of the concurrent programming paradigms in this assignment.  You can use your own observations, as well as the book chapter.

14. echoserverp
PROS: Less risident memory used and can run things concurrently.
CONS: More virtual memory is used...don't know how big of a con that is.
15. echoservert
PROS: Less resident memory used and everything runs on a single process concurrently on multiple threads.
CONS: More virtual memory is used. Even more than the echoserverp.
16. echoservert_pre
PROS: The least amount of resident memory used. Runs multiple threads concurrently for each connection.
CONS: Lots of threads may be hard to manage. Lots of virtual memory used.

Consider the code in echoservert_pre.c for the following questions:

17. Which line of code represents the producer role?  How many producer threads are there?

Line 35 inserts into the buffer which is the role of the producer.
There are 11 producer roles as there is 1 for each thread. (11 threads allowed in for loop, i = 0; i < 10)

18. Which line of code represents the consumer role?  How many consumer threads are there?

Line 43 removes from the buffer which is the role of the consumer.
There are also 11 consumer roles as consumers are made inside the same for loop


Consider the code in sbuf.c for the following questions (P() is equivalent to sem_wait() and V() is equivalent to sem_post()):

19. On line 30, what happens when the slots member is zero?

Then the consumer will sleep (Producer calls P())

20. In the case that a single consumer thread is sleeping at line 43, waiting for a non-zero value of items, what line of code will be executed by a producer to wake that thread up?

The producer will make a V() call to wake the consumer up (within the insert function)
