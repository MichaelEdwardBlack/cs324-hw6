Part 1: no concurrency

1. Show the output from the ps command.

$ ps -Lo user,pid,ppid,nlwp,lwp,vsz,rss,state,ucmd -C echoserveri | grep ^meb1994\\\|USER
USER       PID  PPID NLWP   LWP    VSZ   RSS S CMD
meb1994  16766 16651    1 16766  10916  2088 S echoserveri

2. From the ps output, how many processes and how many threads are running, and why?  Use the PID and LWP to identify different threads or processes.

There is one process running and one thread running.
There is one process because multiple threads run within the context of a single process.
There is one thread running because only one of the 3 executions of 'nc localhost -PORT' actually made a connection.

3. From the ps output, how much virtual and resident memory are they collectively (i.e., total) using on the system?  Note that memory for a given process should only be counted once, not once for each of its threads.

10916 bytes of virtual memory and 2088 bytes of resident memory totals 13004 bytes of memory

4. Enter "Ctrl-c" on the window in which "nc" was first executed to interrupt it.  What happens to the "nc" processes in the other windows?

When you stop the "nc" that connected with the echoserveri, the server establishes a connection with one of the other 2 "nc" commands that are pending.

Part 2: Process-based Concurrency

Repeat the exercises from Part 1 (except question 4), replacing all instances of "echoserveri" with "echoserverp".  Answer questions 1 - 3 for "echoserverp" as questions 5 - 7.

Part 3: Simple Thread-based Concurrency

Repeat the exercises from Part 1 (except question 4), replacing all instances of "echoserveri" with "echoservert".  Answer questions 1 - 3 for "echoservert" as questions 8 - 10.

 
Part 4: Threadpool-based Concurrency

Repeat the exercises from Part 1 (except question 4), replacing all instances of "echoserveri" with "echoservert_pre".  Answer questions 1 - 3 for "echoservert_pre" as questions 11 - 13.

Name at least one pro and one con to each of the concurrent programming paradigms in this assignment.  You can use your own observations, as well as the book chapter.

14. echoserverp
15. echoservert
16. echoservert_pre


Consider the code in echoservert_pre.c for the following questions:

17. Which line of code represents the producer role?  How many producer threads are there?
18. Which line of code represents the consumer role?  How many consumer threads are there?

Consider the code in sbuf.c for the following questions (P() is equivalent to sem_wait() and V() is equivalent to sem_post()):

19. On line 30, what happens when the slots member is zero?
20. In the case that a single consumer thread is sleeping at line 43, waiting for a non-zero value of items, what line of code will be executed by a producer to wake that thread up?
